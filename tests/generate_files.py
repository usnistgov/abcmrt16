import os
import csv
import numpy as np
import pandas as pd
import scipy.io.wavfile as wav

def generate_file_paths(talkers, audio_dir, condition='', pad_flag=True):
    """
    Purpose
    -------
    Generate list of paths to access desired audio clips for intelligibilty testing.
    
    Parameters
    ----------
    talkers : numpy array
              Specifies talkers used.
    audio_dir : string
                Directory where the audio clips are located.
    condition : string, optional
                Specifies test condition number. The default is ''.
    pad_batch : boolean, option
                If true, pad batch number. Default is true.

    Returns
    -------
    file_paths : list
                 List of audio clip paths.
    
    """
    
    file_paths = []
    if pad_flag:
        file_paths = [
                          os.path.join(audio_dir, f'{talkers[talker]}_b{pad_batch(batch,2)}_w{word}_{condition}.wav')
                          for talker in range(len(talkers)) 
                              for batch in range(1,51) 
                                  for word in range(1,7)
                         ]
    else:
        file_paths = [
                          os.path.join(audio_dir, f'{talkers[talker]}_b{batch}_w{word}_{condition}.wav')
                          for talker in range(len(talkers)) 
                              for batch in range(1,51) 
                                  for word in range(1,7)
                         ]      
    return file_paths

def pad_batch(batch, length):  
    """
    Purpose
    -------
    Pads the batch number for audio clips.
    
    Parameters
    ----------
    batch : int
            OriginL batch number.
    length : int
             Specifies desired batch number length.
    
    Returns
    -------
    batch : str
            Padded batch number.
    """
    
    pad = length - len(f'{batch}')  
      
    if pad < 0:
        return batch
    
    zeros = ''
    
    for i in range(pad):
        zeros += '0'
    
    batch = f'{zeros}{batch}'
    
    return batch
   
def generate_speech_vectors(file_paths):
    """
    Purpose
    -------
    Reads in and normalizes data from audio clips specified in file_paths.
    
    Parameters
    ----------
    file_paths : numpy array
                 Specifies paths of desired audio clips used for intelligibiilty testing.
    
    Returns
    -------
    speech : list of numpy arrays
             Normalized audio clip data.
    
    """
    
    speech = []
    for path in file_paths:
        _, data = wav.read(path)
        data = data.astype(float)     
        #Normalize wav file inputs to -1.0 to +1.0
        data = np.true_divide(data, 32767)
        speech.append(data)
    
    return speech
    
def generate_csv(success, file_paths, csv_name):
    """
    Purpose
    -------
    Generates csv file containing success values from ABC_MRT16 and their respective audio clips.
    
    Parameters
    ----------
    success : numpy array
              Success values generated by ABC_MRT16.
    file_paths : numpy array
                 Specifies the paths of audio clips used for intelligibiilty testing.
    csv_name : string
               Specifies the name or path of csv file to output success values to.

    Returns
    -------
    None.

    """

    with open(csv_name, 'w', newline='') as csvf:
            output = csv.writer(csvf)
            output.writerow(['File Name', 'Success'])
            
    for k in range(len(file_paths)):
        with open(csv_name, 'a', newline='') as csvf:
            output = csv.writer(csvf)
            output.writerow([os.path.basename(file_paths[k]), success[k]])
            
def evaluate_csv(python_csv, matlab_csv, diff_csv):
    """
    Purpose
    -------
    Generate csv containing the differences between the success csv files generated by the
    Python and Matlab implementations of ABC_MRT16.

    Parameters
    ----------
    python_csv : string
                 Specifies the name or path of the csv file generated by the Python
                 implementation of ABC_MRT16.
                
    matlab_csv : string
                 Specifies the name or path of the csv file generated by the Matlab
                 implementation of ABC_MRT16.
    diff_csv : string
               Specifies the name or path of the csv file to output diff values to. 
    
    Returns
    -------
    match : boolean
            If True, the csv files generated by the Python and Matlab implementations of
            ABC_MRT16 match.
            If False, there is a discrepancy between the csv files generated by the Python 
            and Matlab implementations of ABC_MRT16.
    """
    
    pcsv = pd.read_csv(python_csv, header=0)
    mcsv = pd.read_csv(matlab_csv, header=0)
    
    diff = pcsv['Success'] - mcsv['Success']
    file_names = pcsv['File Name']
    
    diff = pd.DataFrame({'File Name':file_names,'Difference':diff})
    diff.to_csv(diff_csv, index=False)
    
    match = (diff['Difference'] == 0).all()
    
    return match
